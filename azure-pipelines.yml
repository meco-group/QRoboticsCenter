# push to develop branch or push a tag starting with 'v' to trigger a pipeline
trigger:
  - develop
  - refs/tags/v*

variables:
  - group: Github
  # (de)activate stages
  - name: BUILD
    value: true
  - name: DEPLOY
    value: true
  # (de)activate operating systems
  - name: LINUX
    value: true
  - name: WINDOWS
    value: true
  - name: MAC
    value: true
  - name: QT_VERSION
    value: '5.13.2'

stages:
- stage: build
  condition: eq(variables.BUILD, true)
  jobs:

  # BUILD for LINUX
  - job: linux
    condition: eq(variables.LINUX, true)
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      target: 'release' # default target
    steps:
    - script: |
        python3 -m pip install --upgrade pip setuptools wheel
        python3 -m pip install --user aqtinstall
        python3 -m aqt install --internal --outputdir $(Build.BinariesDirectory)/Qt $(QT_VERSION) linux desktop
        curl -Lo linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/download/6/linuxdeployqt-6-x86_64.AppImage
        chmod a+x linuxdeployqt
      displayName: 'setup'
    - script: echo "##vso[task.setvariable variable=target;]debug"
      condition: not(contains(variables['Build.SourceBranch'], 'refs/tags/v')) # build with debug output unless it's a v* tag
    - script: |
        source resources/scripts/unix_qt_env.sh $(Build.BinariesDirectory)/Qt/$(QT_VERSION)/gcc_64
        rm -rf build/ && mkdir build && cd build
        qmake ../src/QRoboticsCenter/QRoboticsCenter.pro
        if [ $(target) = 'debug' ]; then make debug -j5; else make -j5; fi
      displayName: 'build'
    - script: |
        source resources/scripts/unix_qt_env.sh $(Build.BinariesDirectory)/Qt/$(QT_VERSION)/gcc_64
        python3 resources/scripts/prepare_linuxdeploy.py
        cp linuxdeployqt build/linuxdeployqt && cd build
        cp ../src/QRoboticsCenter/icons/QRoboticsCenter_logo.png app/usr/share/icons/hicolor/256x256/QRoboticsCenter.png
        cp bin/QRoboticsCenter app/usr/bin/QRoboticsCenter
        ./linuxdeployqt app/usr/share/applications/QRoboticsCenter.desktop -unsupported-allow-new-glibc -appimage
        mv QRoboticsCenter-*-x86_64.AppImage QRoboticsCenter.AppImage
        zip -r QRoboticsCenter-linux-x64.zip QRoboticsCenter.AppImage && mv QRoboticsCenter-linux-x64.zip ../
      displayName: 'pack'
    - publish: QRoboticsCenter-linux-x64.zip
      artifact: build-linux

  # BUILD for WINDOWS (Qt 5.11.3)
  - job: windows
    condition: eq(variables.WINDOWS, true)
    pool:
      vmImage: 'vs2017-win2016'
    variables:
      target: 'release' # default target
    steps:
    - script: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install aqtinstall
        python -m aqt install --outputdir $(Build.BinariesDirectory)\Qt $(QT_VERSION) windows desktop win64_msvc2017_64
      displayName: 'setup'
    - script: |
        set PATH=$(Build.BinariesDirectory)\Qt\$(QT_VERSION)\msvc2017_64\bin;%PATH%
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
        mkdir build & cd build
        qmake.exe ../src/QRoboticsCenter/QRoboticsCenter.pro
        set CL=/MP
        nmake debug
      displayName: 'build (debug)'
      condition: not(contains(variables['Build.SourceBranch'], 'refs/tags/v')) # build with debug output unless it's a v* tag
    - script: |
        set PATH=$(Build.BinariesDirectory)\Qt\$(QT_VERSION)\msvc2017_64\bin;%PATH%
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
        mkdir build & cd build
        qmake.exe ../src/QRoboticsCenter/QRoboticsCenter.pro
        set CL=/MP
        nmake
      displayName: 'build (release)'
      condition: contains(variables['Build.SourceBranch'], 'refs/tags/v') # build release if it's a v* tag
    - script: |
        set PATH=$(Build.BinariesDirectory)\Qt\$(QT_VERSION)\msvc2017_64\bin;%PATH%
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
        cd build && mkdir "windows-x64"
        cp "bin/QRoboticsCenter.exe" "windows-x64/QRoboticsCenter.exe"
        windeployqt --dir "windows-x64/" "windows-x64/QRoboticsCenter.exe"
        7z a -tzip "QRoboticsCenter-windows-x64.zip" "./windows-x64/*"
        mv "QRoboticsCenter-windows-x64.zip" ..
      displayName: 'pack'
    - publish: QRoboticsCenter-windows-x64.zip
      artifact: build-windows

  # BUILD for MAC (Qt 5.12.3)
  - job: mac
    condition: eq(variables.MAC, true)
    pool:
      vmImage: 'macOS-10.14'
    variables:
      target: 'release' # default target
    steps:
    - script: |
        python3 -m pip install --upgrade pip setuptools wheel
        python3 -m pip install --user aqtinstall
        python3 -m aqt install --internal --outputdir $(Build.BinariesDirectory)/Qt $(QT_VERSION) mac desktop
      displayName: 'setup'
    - script: echo "##vso[task.setvariable variable=target;]debug"
      condition: not(contains(variables['Build.SourceBranch'], 'refs/tags/v')) # build with debug output unless it's a v* tag
    - script: |
        source resources/scripts/unix_qt_env.sh $(Build.BinariesDirectory)/Qt/$(QT_VERSION)/clang_64
        rm -rf build/ && mkdir build && cd build
        qmake ../src/QRoboticsCenter/QRoboticsCenter.pro
        if [ $(target) = 'debug' ]; then make debug -j5; else make -j5; fi
      displayName: 'build'
    - script: |
        source resources/scripts/unix_qt_env.sh $(Build.BinariesDirectory)/Qt/$(QT_VERSION)/clang_64
        cd build/bin/
        macdeployqt QRoboticsCenter.app -dmg
        zip -r QRoboticsCenter-mac-x64.zip QRoboticsCenter.dmg && cd ../../
        mv build/bin/QRoboticsCenter-mac-x64.zip .
      displayName: 'pack'
    - publish: QRoboticsCenter-mac-x64.zip
      artifact: build-mac

- stage: deploy
  condition: eq(variables.DEPLOY, true)
  dependsOn:
    - build
  jobs:

  # create develop-release if branch name is 'develop'
  - job: develop
    condition: eq(variables['Build.SourceBranchName'], 'develop')
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - download: current
      artifact: build-linux
      condition: eq(variables.LINUX, true)
    - download: current
      artifact: build-windows
      condition: eq(variables.WINDOWS, true)
    - download: current
      artifact: build-mac
      condition: eq(variables.MAC, true)
    - bash: |
        python3 -m pip install --user requests
        cd resources/scripts/
        echo "Delete pre-release of dev tag..."
        python3 github-api.py 'delete-release'
        echo "Update dev tag..."
        python3 github-api.py 'update-tag' '$(Build.SourceVersion)'
        echo "Create pre-release from dev tag..."
        python3 github-api.py 'create-develop-release'
        echo "Upload assets to pre-release..."
        python3 github-api.py 'upload-assets' 'QRoboticsCenter-linux-x64-develop' '../../../build-linux/QRoboticsCenter-linux-x64.zip'
        python3 github-api.py 'upload-assets' 'QRoboticsCenter-windows-x64-develop' '../../../build-windows/QRoboticsCenter-windows-x64.zip'
        python3 github-api.py 'upload-assets' 'QRoboticsCenter-mac-x64-develop' '../../../build-mac/QRoboticsCenter-mac-x64.zip'
      env:
        TOKEN: $(token)
        USER: $(user)
        REPO: $(repo)
        TAG: 'dev'

  # create release if branch contains 'refs/tags/v' (i.e., is tagged with 'v*')
  - job: release
    condition: contains(variables['Build.SourceBranch'], 'refs/tags/v')
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      tag: ''
    steps:
    - download: current
      artifact: build-linux
      condition: eq(variables.LINUX, true)
    - download: current
      artifact: build-windows
      condition: eq(variables.WINDOWS, true)
    - download: current
      artifact: build-mac
      condition: eq(variables.MAC, true)
    - bash: echo "##vso[task.setvariable variable=tag;]""$(git describe --tags)"
    - bash: |
        python3 -m pip install --user requests
        cd resources/scripts/
        echo "Delete release if already exists for this tag..."
        python3 github-api.py 'delete-release'
        echo "Create release from tag..."
        python3 github-api.py 'create-release'
        echo "Upload assets to release..."
        python3 github-api.py 'upload-assets' 'QRoboticsCenter-linux-x64-$(tag)' '../../../build-linux/QRoboticsCenter-linux-x64.zip'
        python3 github-api.py 'upload-assets' 'QRoboticsCenter-windows-x64-$(tag)' '../../../build-windows/QRoboticsCenter-windows-x64.zip'
        python3 github-api.py 'upload-assets' 'QRoboticsCenter-mac-x64-$(tag)' '../../../build-mac/QRoboticsCenter-mac-x64.zip'
      env:
        TOKEN: $(token)
        USER: $(user)
        REPO: $(repo)
        TAG: $(tag)
