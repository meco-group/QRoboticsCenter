# push to develop branch or push a tag starting with 'v' to trigger a pipeline
trigger:
  - develop
  - refs/tags/v*

variables:
  - group: Github
  # (de)activate stages
  - name: BUILD
    value: true
  - name: DEPLOY
    value: true
  # (de)activate operating systems
  - name: LINUX
    value: true
  - name: WINDOWS
    value: true
  - name: MAC
    value: true

stages:
- stage: build
  condition: eq(variables.BUILD, true)
  jobs:

  # BUILD for LINUX
  - job: linux
    condition: eq(variables.LINUX, true)
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      OS: linux
    steps:
    - script: |
        sudo add-apt-repository ppa:beineri/opt-qt-5.10.0-xenial
        sudo apt-get update
        sudo apt-get -y install qt510-meta-full
        sudo apt-get -y install qt5-qmake
        sudo apt-get -y install libgl1-mesa-dev
        curl -vLo linuxdeployqt https://github.com/probonopd/linuxdeployqt/releases/download/6/linuxdeployqt-6-x86_64.AppImage
        chmod a+x linuxdeployqt
      displayName: 'setup'
    - script: |
        source /opt/qt510/bin/qt510-env.sh
        rm -rf build/ && mkdir build && cd build
        qmake ../src/QRoboticsCenter/QRoboticsCenter.pro
        make -j5 && make clean
      displayName: 'build'
    - script: |
        source /opt/qt510/bin/qt510-env.sh
        python3 resources/scripts/prepare_linuxdeploy.py
        cp linuxdeployqt build/linuxdeployqt && cd build
        cp ../resources/icons/QRoboticsCenterLogo_blue.png app/usr/share/icons/hicolor/256x256/QRoboticsCenter.png
        cp bin/QRoboticsCenter app/usr/bin/QRoboticsCenter
        ./linuxdeployqt app/usr/share/applications/QRoboticsCenter.desktop -appimage
        mv QRoboticsCenter-*-x86_64.AppImage QRoboticsCenter.AppImage
        zip -r linux-x86_64.zip QRoboticsCenter.AppImage && mv linux-x86_64.zip ../
      displayName: 'pack'
    - publish: linux-x86_64.zip
      artifact: build-linux

  # BUILD for WINDOWS
  - job: windows
    condition: eq(variables.WINDOWS, true)
    pool:
      vmImage: 'vs2017-win2016'
    variables:
      OS: windows
    steps:
    - script: |
        curl -vLo qt-unified-windows-x86-online.exe http://download.qt.io/official_releases/online_installers/qt-unified-windows-x86-online.exe
        qt-unified-windows-x86-online.exe --verbose --script resources/scripts/qt-installer-windows.qs
      displayName: 'setup'
    - script: |
        set PATH=C:\Users\VssAdministrator\Qt\5.13.1\msvc2017_64\bin;%PATH%
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
        mkdir build & cd build
        qmake.exe ../src/QRoboticsCenter/QRoboticsCenter.pro
        nmake
      displayName: 'build'
    - script: |
        set PATH=C:\Users\VssAdministrator\Qt\5.13.1\msvc2017_64\bin;%PATH%
        call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64
        cd build && mkdir "windows-x86_64"
        cp "bin/QRoboticsCenter.exe" "windows-x86_64/QRoboticsCenter.exe"
        windeployqt --dir "windows-x86_64/" "windows-x86_64/QRoboticsCenter.exe"
        7z a -tzip "windows-x86_64.zip" "./windows-x86_64/*"
        mv "windows-x86_64.zip" ..
      displayName: 'pack'
    - publish: windows-x86_64.zip
      artifact: build-windows

  # BUILD for MAC
  - job: mac
    condition: eq(variables.MAC, true)
    pool:
      vmImage: 'macOS-latest'
    variables:
      OS: mac
    steps:
    - script: |
        brew update
        brew install qt5 zip
        brew link --force qt5
        brew link --force zip
      displayName: 'setup'
    - script: |
        rm -rf build/ && mkdir build && cd build
        qmake ../src/QRoboticsCenter/QRoboticsCenter.pro
        make -j5
      displayName: 'build'
    - script: |
        macdeployqt build/bin/QRoboticsCenter.app -dmg
        cd build/bin/ && zip -r mac-x86_64.zip QRoboticsCenter.dmg && cd ../../
        mv build/bin/mac-x86_64.zip .
      displayName: 'pack'
    - publish: mac-x86_64.zip
      artifact: build-mac

- stage: deploy
  condition: eq(variables.DEPLOY, true)
  dependsOn:
    - build
  jobs:

  # DEPLOY if DEVELOP
  - job: develop
    condition: eq(variables['Build.SourceBranchName'], 'develop')
    steps:
    - download: current
      artifact: build-linux
      condition: eq(variables.LINUX, true)
    - download: current
      artifact: build-windows
      condition: eq(variables.WINDOWS, true)
    - download: current
      artifact: build-mac
      condition: eq(variables.MAC, true)
    - bash: |
        pip install requests 1>/dev/null
        cd resources/scripts/
        echo "Delete pre-release of dev tag..."
        python2 github-api.py 'delete-release'
        echo "Update dev tag..."
        python2 github-api.py 'update-tag' '$(Build.SourceVersion)'
        echo "Create pre-release from dev tag..."
        python2 github-api.py 'create-develop-release'
        echo "Upload assets to pre-release..."
        python2 github-api.py 'upload-assets' 'linux-x64-develop' '../../../build-linux/linux-x86_64.zip'
        python2 github-api.py 'upload-assets' 'windows-x64-develop' '../../../build-windows/windows-x86_64.zip'
        python2 github-api.py 'upload-assets' 'mac-x64-develop' '../../../build-mac/mac-x86_64.zip'
      env:
        TOKEN: $(token)
        USER: $(user)
        REPO: $(repo)
        TAG: 'dev'

  # DEPLOY if RELEASE
  - job: release
    condition: ne(variables['Build.SourceBranchName'], 'develop')
    steps:
    - download: current
      artifact: build-linux
      condition: eq(variables.LINUX, true)
    - download: current
      artifact: build-windows
      condition: eq(variables.WINDOWS, true)
    - download: current
      artifact: build-mac
      condition: eq(variables.MAC, true)
    - bash: |
        pip install requests 1>/dev/null
        cd resources/scripts/
        echo "Delete release if already exists for this tag..."
        python2 github-api.py 'delete-release'
        echo "Create release from tag..."
        python2 github-api.py 'create-release'
        echo "Upload assets to release..."
        python2 github-api.py 'upload-assets' 'linux-x64' '../../../build-linux/linux-x86_64.zip'
        python2 github-api.py 'upload-assets' 'windows-x64' '../../../build-windows/windows-x86_64.zip'
        python2 github-api.py 'upload-assets' 'mac-x64' '../../../build-mac/mac-x86_64.zip'
      env:
        TOKEN: $(token)
        USER: $(user)
        REPO: $(repo)
        TAG: $(Build.SourceBranch)
